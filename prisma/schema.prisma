// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?  // Optional for OAuth users
  googleId      String?  @unique // For Google OAuth users
  avatar        String?
  emailVerified DateTime?
  emailToken    String?  // Email verification token
  isEmailVerified Boolean @default(false) // Email verification status
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  posts         Post[]
  apikeys   apikeys[]
  devices   devices[]
  status    Boolean   @default(false)
  whatsapp  String?   @unique

  @@index([email])
}


model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    users    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}


model apikeys {
  id          String   @id @default(cuid())
  userId      String
  token       String?
  status      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  users       users    @relation(fields: [userId], references: [id])

  @@index([userId])
}


model contacts {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique
  deviceKey       String
  contactId       String   @unique
  contactName     String?  // Removed @db.VarChar for PostgreSQL compatibility
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  isBusiness      Boolean?
  isGroup         Boolean?
  isUser          Boolean?
  name            String?
  number          String?
  serialized      String?
  shortName       String?
  businessProfile Json?    // Store the complete business profile object
  description     String?  // Business description from businessProfile
  email           String?  // Business email from businessProfile
  website         String?  // Business website from businessProfile
  address         String?  // Business address from businessProfile
  latitude        Float?   // Business location latitude
  longitude       Float?   // Business location longitude
  categories      Json?    // Business categories from businessProfile
  devices         devices  @relation(fields: [deviceKey], references: [key])

  @@index([contactId])
  @@index([deviceKey])
}

model devices {
  id        String   @id @default(cuid())
  uuid      String   @unique
  key       String   @unique
  sessionId String   @unique
  number    String
  status    String
  ready     Boolean    @default(false)
  webhook   Boolean    @default(false)
  url       String?
  expired   Int?       @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  contacts  contacts[]
  users     users      @relation(fields: [userId], references: [id])
  messages  messages[]

  @@index([userId])
}

model messages {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique
  deviceKey String
  messageId String   @unique
  read      Int      @default(1)
  noTujuan  String?
  text      String?
  isGroup   Boolean  @default(false)
  secure    Boolean  @default(false)
  timestamp Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  from      String?
  fromMe    Boolean? @default(false)
  to        String?
  type      String?
  devices   devices  @relation(fields: [deviceKey], references: [key])

  @@index([deviceKey])
}
